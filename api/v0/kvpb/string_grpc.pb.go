// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: api/v0/storagepb/string.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringKeyServiceClient is the client API for StringKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringKeyServiceClient interface {
	// SetString sets a key to hold a String value. Creates the key if it doesn't exist.
	// Overwrites the key if it is holding a value of another data type.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*SetStringResponse, error)
	// GetString returns the value a String key is holding.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error)
}

type stringKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringKeyServiceClient(cc grpc.ClientConnInterface) StringKeyServiceClient {
	return &stringKeyServiceClient{cc}
}

func (c *stringKeyServiceClient) SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*SetStringResponse, error) {
	out := new(SetStringResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.StringKeyService/SetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringKeyServiceClient) GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error) {
	out := new(GetStringResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.StringKeyService/GetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringKeyServiceServer is the server API for StringKeyService service.
// All implementations must embed UnimplementedStringKeyServiceServer
// for forward compatibility
type StringKeyServiceServer interface {
	// SetString sets a key to hold a String value. Creates the key if it doesn't exist.
	// Overwrites the key if it is holding a value of another data type.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	SetString(context.Context, *SetStringRequest) (*SetStringResponse, error)
	// GetString returns the value a String key is holding.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetString(context.Context, *GetStringRequest) (*GetStringResponse, error)
	mustEmbedUnimplementedStringKeyServiceServer()
}

// UnimplementedStringKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStringKeyServiceServer struct {
}

func (UnimplementedStringKeyServiceServer) SetString(context.Context, *SetStringRequest) (*SetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetString not implemented")
}
func (UnimplementedStringKeyServiceServer) GetString(context.Context, *GetStringRequest) (*GetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetString not implemented")
}
func (UnimplementedStringKeyServiceServer) mustEmbedUnimplementedStringKeyServiceServer() {}

// UnsafeStringKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringKeyServiceServer will
// result in compilation errors.
type UnsafeStringKeyServiceServer interface {
	mustEmbedUnimplementedStringKeyServiceServer()
}

func RegisterStringKeyServiceServer(s grpc.ServiceRegistrar, srv StringKeyServiceServer) {
	s.RegisterService(&StringKeyService_ServiceDesc, srv)
}

func _StringKeyService_SetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringKeyServiceServer).SetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.StringKeyService/SetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringKeyServiceServer).SetString(ctx, req.(*SetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringKeyService_GetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringKeyServiceServer).GetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.StringKeyService/GetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringKeyServiceServer).GetString(ctx, req.(*GetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringKeyService_ServiceDesc is the grpc.ServiceDesc for StringKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0.storagepb.StringKeyService",
	HandlerType: (*StringKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetString",
			Handler:    _StringKeyService_SetString_Handler,
		},
		{
			MethodName: "GetString",
			Handler:    _StringKeyService_GetString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0/storagepb/string.proto",
}
