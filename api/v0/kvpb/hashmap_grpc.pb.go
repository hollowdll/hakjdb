// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: api/v0/storagepb/hashmap.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashMapKeyServiceClient is the client API for HashMapKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashMapKeyServiceClient interface {
	// SetHashMap sets the specified fields and their values in the HashMap stored at a key.
	// If the specified fields exist, they will be overwritten with the new values.
	// Creates the key if it doesn't exist. Overwrites the key if it is holding a value of another data type.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	SetHashMap(ctx context.Context, in *SetHashMapRequest, opts ...grpc.CallOption) (*SetHashMapResponse, error)
	// GetHashMapFieldValues returns the values of the specified fields in the HashMap stored at a key.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetHashMapFieldValues(ctx context.Context, in *GetHashMapFieldValueRequest, opts ...grpc.CallOption) (*GetHashMapFieldValueResponse, error)
	// DeleteHashMapFields removes the specified fields from the HashMap stored at a key.
	// Ignores fields that do not exist.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	DeleteHashMapFields(ctx context.Context, in *DeleteHashMapFieldsRequest, opts ...grpc.CallOption) (*DeleteHashMapFieldsResponse, error)
	// GetAllHashMapFieldsAndValues returns all the fields and values of the HashMap stored at a key.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetAllHashMapFieldsAndValues(ctx context.Context, in *GetAllHashMapFieldsAndValuesRequest, opts ...grpc.CallOption) (*GetAllHashMapFieldsAndValuesResponse, error)
}

type hashMapKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashMapKeyServiceClient(cc grpc.ClientConnInterface) HashMapKeyServiceClient {
	return &hashMapKeyServiceClient{cc}
}

func (c *hashMapKeyServiceClient) SetHashMap(ctx context.Context, in *SetHashMapRequest, opts ...grpc.CallOption) (*SetHashMapResponse, error) {
	out := new(SetHashMapResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.HashMapKeyService/SetHashMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashMapKeyServiceClient) GetHashMapFieldValues(ctx context.Context, in *GetHashMapFieldValueRequest, opts ...grpc.CallOption) (*GetHashMapFieldValueResponse, error) {
	out := new(GetHashMapFieldValueResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.HashMapKeyService/GetHashMapFieldValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashMapKeyServiceClient) DeleteHashMapFields(ctx context.Context, in *DeleteHashMapFieldsRequest, opts ...grpc.CallOption) (*DeleteHashMapFieldsResponse, error) {
	out := new(DeleteHashMapFieldsResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.HashMapKeyService/DeleteHashMapFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashMapKeyServiceClient) GetAllHashMapFieldsAndValues(ctx context.Context, in *GetAllHashMapFieldsAndValuesRequest, opts ...grpc.CallOption) (*GetAllHashMapFieldsAndValuesResponse, error) {
	out := new(GetAllHashMapFieldsAndValuesResponse)
	err := c.cc.Invoke(ctx, "/api.v0.storagepb.HashMapKeyService/GetAllHashMapFieldsAndValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashMapKeyServiceServer is the server API for HashMapKeyService service.
// All implementations must embed UnimplementedHashMapKeyServiceServer
// for forward compatibility
type HashMapKeyServiceServer interface {
	// SetHashMap sets the specified fields and their values in the HashMap stored at a key.
	// If the specified fields exist, they will be overwritten with the new values.
	// Creates the key if it doesn't exist. Overwrites the key if it is holding a value of another data type.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	SetHashMap(context.Context, *SetHashMapRequest) (*SetHashMapResponse, error)
	// GetHashMapFieldValues returns the values of the specified fields in the HashMap stored at a key.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetHashMapFieldValues(context.Context, *GetHashMapFieldValueRequest) (*GetHashMapFieldValueResponse, error)
	// DeleteHashMapFields removes the specified fields from the HashMap stored at a key.
	// Ignores fields that do not exist.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	DeleteHashMapFields(context.Context, *DeleteHashMapFieldsRequest) (*DeleteHashMapFieldsResponse, error)
	// GetAllHashMapFieldsAndValues returns all the fields and values of the HashMap stored at a key.
	// Uses the database sent in gRPC metadata or the default database if omitted.
	GetAllHashMapFieldsAndValues(context.Context, *GetAllHashMapFieldsAndValuesRequest) (*GetAllHashMapFieldsAndValuesResponse, error)
	mustEmbedUnimplementedHashMapKeyServiceServer()
}

// UnimplementedHashMapKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashMapKeyServiceServer struct {
}

func (UnimplementedHashMapKeyServiceServer) SetHashMap(context.Context, *SetHashMapRequest) (*SetHashMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHashMap not implemented")
}
func (UnimplementedHashMapKeyServiceServer) GetHashMapFieldValues(context.Context, *GetHashMapFieldValueRequest) (*GetHashMapFieldValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashMapFieldValues not implemented")
}
func (UnimplementedHashMapKeyServiceServer) DeleteHashMapFields(context.Context, *DeleteHashMapFieldsRequest) (*DeleteHashMapFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHashMapFields not implemented")
}
func (UnimplementedHashMapKeyServiceServer) GetAllHashMapFieldsAndValues(context.Context, *GetAllHashMapFieldsAndValuesRequest) (*GetAllHashMapFieldsAndValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHashMapFieldsAndValues not implemented")
}
func (UnimplementedHashMapKeyServiceServer) mustEmbedUnimplementedHashMapKeyServiceServer() {}

// UnsafeHashMapKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashMapKeyServiceServer will
// result in compilation errors.
type UnsafeHashMapKeyServiceServer interface {
	mustEmbedUnimplementedHashMapKeyServiceServer()
}

func RegisterHashMapKeyServiceServer(s grpc.ServiceRegistrar, srv HashMapKeyServiceServer) {
	s.RegisterService(&HashMapKeyService_ServiceDesc, srv)
}

func _HashMapKeyService_SetHashMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHashMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMapKeyServiceServer).SetHashMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.HashMapKeyService/SetHashMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMapKeyServiceServer).SetHashMap(ctx, req.(*SetHashMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashMapKeyService_GetHashMapFieldValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashMapFieldValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMapKeyServiceServer).GetHashMapFieldValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.HashMapKeyService/GetHashMapFieldValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMapKeyServiceServer).GetHashMapFieldValues(ctx, req.(*GetHashMapFieldValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashMapKeyService_DeleteHashMapFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHashMapFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMapKeyServiceServer).DeleteHashMapFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.HashMapKeyService/DeleteHashMapFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMapKeyServiceServer).DeleteHashMapFields(ctx, req.(*DeleteHashMapFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashMapKeyService_GetAllHashMapFieldsAndValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHashMapFieldsAndValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMapKeyServiceServer).GetAllHashMapFieldsAndValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.storagepb.HashMapKeyService/GetAllHashMapFieldsAndValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMapKeyServiceServer).GetAllHashMapFieldsAndValues(ctx, req.(*GetAllHashMapFieldsAndValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashMapKeyService_ServiceDesc is the grpc.ServiceDesc for HashMapKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashMapKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0.storagepb.HashMapKeyService",
	HandlerType: (*HashMapKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHashMap",
			Handler:    _HashMapKeyService_SetHashMap_Handler,
		},
		{
			MethodName: "GetHashMapFieldValues",
			Handler:    _HashMapKeyService_GetHashMapFieldValues_Handler,
		},
		{
			MethodName: "DeleteHashMapFields",
			Handler:    _HashMapKeyService_DeleteHashMapFields_Handler,
		},
		{
			MethodName: "GetAllHashMapFieldsAndValues",
			Handler:    _HashMapKeyService_GetAllHashMapFieldsAndValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v0/storagepb/hashmap.proto",
}
