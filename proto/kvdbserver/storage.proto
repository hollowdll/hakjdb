syntax = "proto3";

option go_package = "proto/kvdbserver";

package kvdbserverapi;

message SetStringRequest {
    // The key to use.
    string key = 1;
    // The value to store.
    string value = 2;
}

message SetStringResponse {}

message GetStringRequest {
    // The key to use.
    string key = 1;
}

message GetStringResponse {
    // The returned value.
    string value = 1;
    // True if the key exists. False if it doesn't exist.
    bool found = 2;
}

message DeleteKeyRequest {
    // The key to delete.
    string key = 1;
}

message DeleteKeyResponse {
    // True if the key was deleted. False if it doesn't exist.
    bool ok = 1;
}

message DeleteAllKeysRequest {}

message DeleteAllKeysResponse {}

message GetKeysRequest {}

message GetKeysResponse {
    // List of returned keys.
    repeated string keys = 1;
}

message SetHashMapRequest {
    // The key to use.
    string key = 1;
    // The fields to be set and their corresponding values.
    map<string, string> fields = 2;
}

message SetHashMapResponse {}

message GetHashMapFieldValueRequest {
    // The key to use.
    string key = 1;
    // The field whose value should be returned.
    string field = 2;
}

message GetHashMapFieldValueResponse {
    // The returned value.
    string value = 1;
    // True if the field exists. False if the key or field doesn't exist.
    bool ok = 2;
}

service StorageService {
    // SetString sets a String value using a key. Creates the key if it doesn't exist.
    rpc SetString(SetStringRequest) returns (SetStringResponse) {}

    // GetString gets a String value using a key.
    rpc GetString(GetStringRequest) returns (GetStringResponse) {}

    // DeleteKey deletes a key and its value.
    rpc DeleteKey(DeleteKeyRequest) returns (DeleteKeyResponse) {}

    // DeleteAllKeys deletes all the keys of a database.
    rpc DeleteAllKeys(DeleteAllKeysRequest) returns (DeleteAllKeysResponse) {}

    // GetKeys returns all the keys of a database.
    rpc GetKeys(GetKeysRequest) returns (GetKeysResponse) {}

    // SetHashMap sets fields in a HashMap using a key.
    // Previous fields are overwritten. Creates the key if it doesn't exist.
    rpc SetHashMap(SetHashMapRequest) returns (SetHashMapResponse) {}

    // GetHashMapFieldValue returns a single HashMap field value using a key.
    rpc GetHashMapFieldValue(GetHashMapFieldValueRequest) returns (GetHashMapFieldValueResponse) {}
}